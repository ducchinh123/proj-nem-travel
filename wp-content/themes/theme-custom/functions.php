<?php


// ============================================KHU V·ª∞C N√ÄY S·∫º CH·ª®A CODE X·ª¨ L√ù TRONG D·ª∞ √ÅN N·∫æM TRAVEL üèùÔ∏è üèùÔ∏èüèùÔ∏è====================


// ========================================================= KHU VUC CUA CHINH===================================================
//) 1 vi·∫øt l·∫°i quy t·∫Øc url trang danh s√°ch kh√°ch s·∫°n
function rewrite_the_hotel_path() {
    add_rewrite_rule(
        '^khach-san-([^/]+)/?$',
        'index.php?pagename=khach-san-dia-phuong&param_name_hotel=$matches[1]',
        'top'
    );
}

add_action('init', 'rewrite_the_hotel_path');

function custom_query_vars_hotel($vars) {
    $vars[] = 'param_name_hotel';
    return $vars;
}

add_filter('query_vars', 'custom_query_vars_hotel');

// k·∫øt th√∫c vi·∫øt l·∫°i quy t·∫Øc url trang danh s√°ch kh√°ch s·∫°n

//) 2 vi·∫øt l·∫°i quy t·∫Øc url trang danh s√°ch chi ti·∫øt kh√°ch s·∫°n

function rewrite_the_detail_hotel_path() {
        
    add_rewrite_rule(
        '^khach-san-([^/]+)/([^/]+)/?$',
        'index.php?pagename=chi-tiet-khach-san&param_name_hotel_detail=$matches[1]&param_detail_hotel=$matches[2]',
        'top'
    );
}

add_action('init', 'rewrite_the_detail_hotel_path');

function custom_query_vars_hotel_detail($vars) {
    $vars [] = 'param_name_hotel_detail';
    $vars [] = 'param_detail_hotel';
    return $vars;
}

add_filter('query_vars', 'custom_query_vars_hotel_detail');
// K·∫øt th√∫c vi·∫øt l·∫°i quy t·∫Øc url trang danh s√°ch chi ti·∫øt kh√°ch s·∫°n

// ========================================================= KHU VUC CUA DAO===================================================



//===============================================================================================================================
function my_theme_setup()
{
    register_nav_menus(
        array(
            'header_menu' => __('Header Menu', 'my_theme'),
        )
    );
}
add_action('after_setup_theme', 'my_theme_setup');

// Th√™m Meta Box ƒë·ªÉ nh·∫≠p t·ª´ kh√≥a meta
function add_meta_keywords_box()
{
    add_meta_box(
        'meta_keywords', // ID c·ªßa meta box
        'Meta Keywords', // Ti√™u ƒë·ªÅ c·ªßa meta box
        'show_meta_keywords_box', // H√†m hi·ªÉn th·ªã n·ªôi dung c·ªßa meta box
        'post', // Lo·∫°i b√†i vi·∫øt √°p d·ª•ng
        'side', // ƒê·∫∑t v·ªã tr√≠ l√† sidebar
        'high' // ƒê·ªô ∆∞u ti√™n hi·ªÉn th·ªã cao
    );
}
add_action('add_meta_boxes', 'add_meta_keywords_box');



// Hi·ªÉn th·ªã Meta Box
function show_meta_keywords_box($post)
{
    $meta_keywords = get_post_meta($post->ID, '_meta_keywords', true);
    echo '<textarea id="meta_keywords" name="meta_keywords" style="width:100%; height:100px;" placeholder="S·ª≠ d·ª•ng c√°c t·ª´ kh√≥a ch√≠nh quan tr·ªçng bao ch·ª©a n·ªôi dung b√†i vi·∫øt.M·ªói kh√≥a c√°ch nhau b·ªüi d·∫•u ph·∫©y.">' . esc_textarea($meta_keywords) . '</textarea>';
}

// L∆∞u Meta Keywords khi l∆∞u b√†i vi·∫øt
function save_meta_keywords($post_id)
{
    if (isset($_POST['meta_keywords'])) {
        update_post_meta($post_id, '_meta_keywords', sanitize_text_field($_POST['meta_keywords']));
    }
}
add_action('save_post', 'save_meta_keywords');

// Hi·ªÉn th·ªã Meta Keywords trong ph·∫ßn head c·ªßa trang
function add_meta_keywords_to_head()
{
    if (is_single()) {
        global $post;
        $meta_keywords = get_post_meta($post->ID, '_meta_keywords', true);
        if ($meta_keywords) {
            echo '<meta name="keywords" content="' . esc_attr($meta_keywords) . '">' . "\n";
        }
    }
}
add_action('wp_head', 'add_meta_keywords_to_head');


function restrict_png_upload($file)
{
    $type = $file['type'];
    $extension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));

    // Ki·ªÉm tra n·∫øu file l√† .png
    if ($extension === 'png') {
        $file['error'] = 'T·∫£i l√™n h√¨nh ·∫£nh PNG kh√¥ng ƒë∆∞·ª£c ph√©p.';
    }

    return $file;
}
add_filter('wp_handle_upload_prefilter', 'restrict_png_upload');



function custom_rewrite_rule()
{
    add_rewrite_rule(
        '^mau-anh-([^/]+)/?$',
        'index.php?pagename=mau&custom_param=$matches[1]',
        'top'
    );
}
add_action('init', 'custom_rewrite_rule');


function custom_query_vars($vars)
{
    $vars[] = 'custom_param';
    return $vars;
}
add_filter('query_vars', 'custom_query_vars');


function custom_rewrite_rule_tag()
{
    add_rewrite_rule(
        '^tag/([^/]+)/?$',
        'index.php?pagename=tag&custom_param=$matches[1]',
        'top'
    );
}
add_action('init', 'custom_rewrite_rule_tag');


function custom_query_vars_tag($vars)
{
    $vars[] = 'custom_param';
    return $vars;
}
add_filter('query_vars', 'custom_query_vars_tag');



function slug_to_normal($slug)
{
    // Thay th·∫ø d·∫•u g·∫°ch ngang b·∫±ng kho·∫£ng tr·∫Øng
    $normal = str_replace('-', ' ', $slug);

    // Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu m·ªói t·ª´
    $normal = ucwords($normal);

    return $normal;
}




add_theme_support('post-thumbnails');


function my_general_settings_register_fields()
{
    // Th√™m tr∆∞·ªùng Meta Description
    add_settings_field(
        'meta_description', // ID c·ªßa tr∆∞·ªùng
        '<label for="meta_description">' . __('Meta Description', 'meta_description') . '</label>', // Nh√£n
        'meta_description_field_html', // H√†m hi·ªÉn th·ªã tr∆∞·ªùng
        'general' // Trang c√†i ƒë·∫∑t
    );

    // ƒêƒÉng k√Ω tr∆∞·ªùng Meta Description
    register_setting('general', 'meta_description', 'esc_attr');

    // Th√™m tr∆∞·ªùng Meta Keywords
    add_settings_field(
        'meta_keywords', // ID c·ªßa tr∆∞·ªùng
        '<label for="meta_keywords">' . __('Meta Keywords', 'meta_keywords') . '</label>', // Nh√£n
        'meta_keywords_field_html', // H√†m hi·ªÉn th·ªã tr∆∞·ªùng
        'general' // Trang c√†i ƒë·∫∑t
    );

    // ƒêƒÉng k√Ω tr∆∞·ªùng Meta Keywords
    register_setting('general', 'meta_keywords', 'esc_attr');


    // Th√™m tr∆∞·ªùng Meta Description
    add_settings_field(
        'contact_zalo', // ID c·ªßa tr∆∞·ªùng
        '<label for="contact_zalo">' . __('S·ªë zalo li√™n h·ªá', 'contact_zalo') . '</label>', // Nh√£n
        'contact_zalo_field_html', // H√†m hi·ªÉn th·ªã tr∆∞·ªùng
        'general' // Trang c√†i ƒë·∫∑t
    );

    // ƒêƒÉng k√Ω tr∆∞·ªùng Meta Description
    register_setting('general', 'contact_zalo', 'esc_attr');

    // Th√™m tr∆∞·ªùng Meta Description
    add_settings_field(
        'contact_fb', // ID c·ªßa tr∆∞·ªùng
        '<label for="contact_fb">' . __('Link trang Facebook', 'contact_fb') . '</label>', // Nh√£n
        'contact_fb_field_html', // H√†m hi·ªÉn th·ªã tr∆∞·ªùng
        'general' // Trang c√†i ƒë·∫∑t
    );

    // ƒêƒÉng k√Ω tr∆∞·ªùng Meta Description
    register_setting('general', 'contact_fb', 'esc_attr');


    // ƒêƒÉng k√Ω tr∆∞·ªùng Meta Description
    register_setting('general', 'contact_zalo', 'esc_attr');

    // Th√™m tr∆∞·ªùng Meta Description
    add_settings_field(
        'contact_phone', // ID c·ªßa tr∆∞·ªùng
        '<label for="contact_phone">' . __('S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá', 'contact_phone') . '</label>', // Nh√£n
        'contact_phone_field_html', // H√†m hi·ªÉn th·ªã tr∆∞·ªùng
        'general' // Trang c√†i ƒë·∫∑t
    );

    // ƒêƒÉng k√Ω tr∆∞·ªùng Meta Description
    register_setting('general', 'contact_phone', 'esc_attr');
}
add_action('admin_init', 'my_general_settings_register_fields');

// H√†m hi·ªÉn th·ªã tr∆∞·ªùng Meta Description
function meta_description_field_html()
{
    $value = get_option('meta_description', '');
    echo '<input type="text" id="meta_description" name="meta_description" value="' . esc_attr($value) . '" />';
}


// H√†m hi·ªÉn th·ªã tr∆∞·ªùng Meta Keywords
function meta_keywords_field_html()
{
    $value = get_option('meta_keywords', '');
    echo '<input type="text" id="meta_keywords" name="meta_keywords" value="' . esc_attr($value) . '" />';
}


// H√†m hi·ªÉn th·ªã tr∆∞·ªùng Zalo
function contact_zalo_field_html()
{
    $value = get_option('contact_zalo', '');
    echo '<input type="text" id="contact_zalo" placeholder="S·ªë zalo" name="contact_zalo" value="' . esc_attr($value) . '" />';
}

// H√†m hi·ªÉn th·ªã tr∆∞·ªùng fb
function contact_fb_field_html()
{
    $value = get_option('contact_fb', '');
    echo '<input type="text" id="contact_fb" placeholder="Url facebook" name="contact_fb" value="' . esc_attr($value) . '" />';
}


// H√†m hi·ªÉn th·ªã tr∆∞·ªùng Phone
function contact_phone_field_html()
{
    $value = get_option('contact_phone', '');
    echo '<input type="text" id="contact_phone" placeholder="S·ªë ƒëi·ªán tho·∫°i" name="contact_phone" value="' . esc_attr($value) . '" />';
}

function get_meta_kws($meta_kset)
{

    if (is_single()) {

        $post_tags = get_the_tags();
        $kw = get_post_meta(get_the_ID(), '_meta_keywords', true);

        if (!empty($kw)) {
            echo ucfirst($kw);
        } else {

            if (!empty($post_tags)) {
                $t = '';
                foreach ($post_tags as $tag) {

                    $t .= $tag->name . ", ";
                }
                echo ucfirst(substr($t, 0, strlen($t) - 2));
            } else {
                echo $meta_kset;
                return;
            }
        }
    } else {
        echo $meta_kset;
    }
}


function my_theme_register_custom_block_patterns()
{

    if (function_exists('register_block_pattern')) {

        // Pattern cho h2

        $pattern_content_h2 = <<<HTML

            <!-- wp:heading {"level":2,"className":"jump-link"} -->

            <h2 class="jump-link">Title H2 width Jump Link</h2>

            <!-- /wp:heading -->

        HTML;



        register_block_pattern(

            'mytheme/jump-link-heading-h2',

            array(

                'title' => __('H2 Jump Link', 'text-domain'),

                'description' => _x('A heading 2 block with a jump link class.', 'Block pattern description', 'text-domain'),

                'content' => $pattern_content_h2,

                'categories' => array('jump link')

            )

        );



        // Pattern cho h3

        $pattern_content_h3 = <<<HTML

            <!-- wp:heading {"level":3,"className":"jump-link"} -->

            <h3 class="jump-link">Title H3 width Jump Link</h3>

            <!-- /wp:heading -->

        HTML;



        register_block_pattern(

            'mytheme/jump-link-heading-h3',

            array(

                'title' => __('H3 Jump Link', 'text-domain'),

                'description' => _x('A heading 3 block with a jump link class.', 'Block pattern description', 'text-domain'),

                'content' => $pattern_content_h3,

                'categories' => array('jump link')

            )

        );
    }
}



add_action('init', 'my_theme_register_custom_block_patterns');

function load_more_posts()
{

    $paged = $_POST['page'];

    $cate = $_POST['cate'];

    $posts_per_page = $_POST['posts_per_page'];

    $args = array(

        'post_type' => 'post',

        'posts_per_page' => $posts_per_page,

        'orderby' => 'date',

        'order' => 'DESC',

        'post_status' => 'publish',

        'paged' => $paged

    );

    if (!empty($cate)) {

        $args['cat'] = (int) $cate;
    }

    // wp_send_json($args);
    $query = new WP_Query($args);

    $response = array();

    if ($query->have_posts()) {

        ob_start();

        while ($query->have_posts()):
            $query->the_post();
            // L·∫•y ng√†y t·∫°o b√†i vi·∫øt
            $post_date = get_the_date('Y-m-d H:i:s', get_the_ID());
            $post_timestamp = strtotime($post_date);
            $current_timestamp = current_time('timestamp');

            // T√≠nh to√°n s·ªë ng√†y ƒë√£ tr√¥i qua
            $days_diff = floor(($current_timestamp - $post_timestamp) / (60 * 60 * 24));

?>

            <li>

                <div class="post-home">

                    <div class="post-home-thumb">

                        <a href="<?php the_permalink(); ?>" class="wrap-next-image">

                            <?php if (has_post_thumbnail()): ?>
                                <div class="overlay-post"></div>
                                <img layout="fill" src="<?php the_post_thumbnail_url(); ?>" alt="<?php the_title(); ?>"
                                    class="lazy-wave">

                            <?php else: ?>

                                <img layout="fill" src="path/to/default-image.jpg" alt="default image" class="">

                            <?php endif; ?>

                        </a>

                        <?php if ($days_diff < 2): ?>
                            <div class="post-home-lable" style="width: unset !important;"><span>M·ªõi</span>
                            </div>
                        <?php endif; ?>

                    </div>

                    <h2 class="post-home-title">

                        <a href="<?php the_permalink(); ?>" style="width:100%"><?php the_title(); ?></a>

                    </h2>

                    <div class="post-home-date" style="position:relative">

                        <span><?php echo get_the_date('d/m/Y H:i'); ?></span>

                    </div>

                </div>

            </li>

        <?php

        endwhile;

        $response['html'] = ob_get_clean();

        wp_reset_postdata();



        // Ki·ªÉm tra n·∫øu c√≤n b√†i vi·∫øt ƒë·ªÉ t·∫£i th√™m

        if ($query->found_posts > $posts_per_page * $paged) {

            $response['status'] = 'success';

            $response['message'] = 'Posts loaded';
        } else {

            $response['status'] = 'no_more_posts';

            $response['message'] = 'No more posts to load';
        }
    } else {

        $response['status'] = 'no_more_posts';

        $response['message'] = 'No more posts to load';
    }



    wp_send_json($response);

    wp_die();
}

add_action('wp_ajax_load_more_posts', 'load_more_posts');

add_action('wp_ajax_nopriv_load_more_posts', 'load_more_posts');





function remove_category_from_url($wp_rewrite)
{
    $new_rules = [];

    // L·∫•y t·∫•t c·∫£ c√°c danh m·ª•c, bao g·ªìm c·∫£ nh·ªØng danh m·ª•c kh√¥ng c√≥ b√†i vi·∫øt n√†o
    $categories = get_categories(['hide_empty' => false]);

    foreach ($categories as $category) {
        // L·∫•y slug c·ªßa danh m·ª•c
        $category_slug = $category->slug;

        // T·∫°o quy t·∫Øc rewrite m·ªõi cho danh m·ª•c, thay th·∫ø /category/category-slug b·∫±ng /category-slug
        $new_rules[$category_slug . '/?$'] = 'index.php?category_name=' . $category_slug;
        $new_rules[$category_slug . '/page/?([0-9]{1,})/?$'] = 'index.php?category_name=' . $category_slug . '&paged=$matches[1]';

        // T·∫°o quy t·∫Øc rewrite cho danh m·ª•c con
        $category_children = get_term_children($category->term_id, 'category');
        foreach ($category_children as $child) {
            $child_category = get_term_by('id', $child, 'category');
            $child_slug = $child_category->slug;

            // T·∫°o URL cho danh m·ª•c con
            $new_rules[$category_slug . '/' . $child_slug . '/?$'] = 'index.php?category_name=' . $category_slug . '/' . $child_slug;
            $new_rules[$category_slug . '/' . $child_slug . '/page/?([0-9]{1,})/?$'] = 'index.php?category_name=' . $category_slug . '/' . $child_slug . '&paged=$matches[1]';

            // T·∫°o quy t·∫Øc rewrite cho danh m·ª•c con c·ªßa danh m·ª•c con (n·∫øu c√≥)
            $grandchildren = get_term_children($child_category->term_id, 'category');
            foreach ($grandchildren as $grandchild) {
                $grandchild_category = get_term_by('id', $grandchild, 'category');
                $grandchild_slug = $grandchild_category->slug;

                // T·∫°o URL cho danh m·ª•c con c·ªßa danh m·ª•c con
                $new_rules[$category_slug . '/' . $child_slug . '/' . $grandchild_slug . '/?$'] = 'index.php?category_name=' . $category_slug . '/' . $child_slug . '/' . $grandchild_slug;
                $new_rules[$category_slug . '/' . $child_slug . '/' . $grandchild_slug . '/page/?([0-9]{1,})/?$'] = 'index.php?category_name=' . $category_slug . '/' . $child_slug . '/' . $grandchild_slug . '&paged=$matches[1]';
            }
        }
    }

    // Th√™m c√°c quy t·∫Øc m·ªõi v√†o ƒë·∫ßu danh s√°ch quy t·∫Øc hi·ªán c√≥
    $wp_rewrite->rules = $new_rules + $wp_rewrite->rules;
}

add_filter('generate_rewrite_rules', 'remove_category_from_url');




function fix_category_pagination_redirect($redirect_url, $requested_url)
{

    if (strpos($requested_url, '/category/') !== false) {

        $redirect_url = str_replace('/category/', '/', $requested_url);
    }

    return $redirect_url;
}



add_filter('redirect_canonical', 'fix_category_pagination_redirect', 10, 2);



function remove_category_base($link)
{

    return str_replace('/category/', '/', $link);
}



add_filter('category_link', 'remove_category_base');

add_action('init', 'remove_category_base_refresh_rules');



function remove_category_base_refresh_rules()
{

    global $wp_rewrite;

    $wp_rewrite->flush_rules();
}



// X√≥a c√°c k√≠ch th∆∞·ªõc ·∫£nh kh√¥ng c·∫ßn thi·∫øt

function remove_unnecessary_image_sizes()
{

    remove_image_size('thumbnail');

    remove_image_size('medium');

    remove_image_size('large');

    // X√≥a c√°c k√≠ch th∆∞·ªõc ·∫£nh t√πy ch·ªânh n·∫øu c√≥

    remove_image_size('custom-size-1');

    remove_image_size('custom-size-2');
}

add_action('init', 'remove_unnecessary_image_sizes');



// Th√™m k√≠ch th∆∞·ªõc ·∫£nh m·ªõi

function add_custom_image_size()
{

    add_image_size('custom-size', 800, 600, true); // Thay ƒë·ªïi k√≠ch th∆∞·ªõc theo nhu c·∫ßu c·ªßa b·∫°n

}

add_action('init', 'add_custom_image_size');



// Ch·ªâ gi·ªØ l·∫°i k√≠ch th∆∞·ªõc ·∫£nh m·ªõi khi t·∫£i l√™n ·∫£nh m·ªõi

function retain_only_custom_image_size($sizes)
{

    return array(

        'custom-size' => __('Custom Size')

    );
}

add_filter('intermediate_image_sizes_advanced', 'retain_only_custom_image_size');


// Collection

function get_collection()
{
    global $wpdb;
    $query = "SELECT wp_collection.slug_name, wp_collection.name FROM wp_collection WHERE wp_collection.status = 0";
    $result = $wpdb->get_results($query);
    if (empty($result)) {
        return [];
    }
    // Ph√¢n chia k·∫øt qu·∫£ th√†nh c√°c m·∫£ng nh·ªè, m·ªói m·∫£ng ch·ª©a 2 ph·∫ßn t·ª≠
    $chunked_results = array_chunk($result, 8);

    return $chunked_results;
}

function my_print($data)
{
    if (is_array($data)) {
        echo "<pre>";
        print_r($data);
        echo "</pre>";
    } else {
        echo 'No Array';
    }
}

function substring_image($link)
{
    $url = $link;
    $substring = strstr($url, '/uploads/');
    if ($substring !== false) {
        $path_after_uploads = substr($substring, strlen('/uploads'));
        return wp_upload_dir()['baseurl'] . $path_after_uploads; // K·∫øt qu·∫£: 2024/06/ban-le-2.jpg
    }
}


// API image other

add_action('rest_api_init', function () {
    register_rest_route(
        'gacmai/api',
        '/select-data/(?P<id_collect>\d+)/(?P<id_image>\d+)',
        array(
            'methods' => 'GET',
            'callback' => 'get_images_other',
            'permission_callback' => '__return_true'
        )
    );
});


function get_images_other(WP_REST_Request $request)
{
    global $wpdb;
    $id_image = $request->get_param('id_image');
    $id_collect = $request->get_param('id_collect');

    if (isset($id_image) && isset($id_collect)) {
        // Th·ª±c hi·ªán truy v·∫•n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu


        $results = $wpdb->get_results(
            $wpdb->prepare("SELECT wp_collection_image.detail ,wp_collection_image.id_image, wp_posts.guid FROM wp_collection_image INNER JOIN wp_posts on wp_collection_image.id_image = wp_posts.ID INNER JOIN wp_collection on wp_collection.id_collection = wp_collection_image.id_collection WHERE wp_collection_image.id_collection = %d", $id_collect),
            ARRAY_A
        );

        if ($results) {
            return new WP_REST_Response(array('success' => true, 'data' => $results), 200);
        } else {
            return new WP_Error('not_found', 'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ·∫£nh.', array('status' => 404));
        }
    }

    return new WP_Error('missing_param', 'Thi·∫øu tham s·ªë id_image.', array('status' => 400));
}


function format_date_time($date_string)
{
    // Chuy·ªÉn ƒë·ªïi chu·ªói ng√†y gi·ªù th√†nh timestamp
    $timestamp = strtotime($date_string);

    // Ki·ªÉm tra n·∫øu gi√° tr·ªã timestamp l√† h·ª£p l·ªá
    if ($timestamp === false) {
        return 'Ng√†y gi·ªù kh√¥ng h·ª£p l·ªá';
    }

    // ƒê·ªãnh d·∫°ng ng√†y/th√°ng/nƒÉm gi·ªù:ph√∫t
    $format = 'd/m/Y';
    return date_i18n($format, $timestamp);
}


// T√¨m ki·∫øm b√†i vi·∫øt

// ƒêƒÉng k√Ω Endpoint REST API
add_action('rest_api_init', function () {
    register_rest_route('custom/v1', '/search-posts', [
        'methods' => 'POST',
        'callback' => 'search_posts_api',
        'permission_callback' => '__return_true', // Thay ƒë·ªïi ƒëi·ªÅu n√†y n·∫øu b·∫°n c·∫ßn x√°c th·ª±c
    ]);
});

// Callback function x·ª≠ l√Ω y√™u c·∫ßu API
function search_posts_api(WP_REST_Request $request)
{
    // L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm t·ª´ y√™u c·∫ßu POST
    $keyword = $request->get_param('keyword');
    $paged = $request->get_param('paged');

    // G·ªçi h√†m t√¨m ki·∫øm b√†i vi·∫øt
    $posts = search_post_with_title($keyword, $paged);

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON
    return new WP_REST_Response($posts, 200);
}

// H√†m t√¨m ki·∫øm b√†i vi·∫øt theo ti√™u ƒë·ªÅ ho·∫∑c danh m·ª•c
// H√†m t√¨m ki·∫øm b√†i vi·∫øt theo ti√™u ƒë·ªÅ ho·∫∑c danh m·ª•c v·ªõi ph√¢n trang
function search_post_with_title($keyword, $paged = 1)
{
    // L√†m s·∫°ch v√† ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
    $keyword = sanitize_text_field($keyword);
    $paged = intval($paged);

    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa tham s·ªë 'paged'
    if ($paged < 1) {
        $paged = 1;
    }

    // L·∫•y ID c·ªßa danh m·ª•c c·∫ßn lo·∫°i tr·ª´
    $exclude_category = get_category_by_slug('cong-trinh-thuc-te');
    $exclude_category_id = $exclude_category ? $exclude_category->term_id : 0;

    // T·∫°o ƒë·ªëi s·ªë cho truy v·∫•n WP_Query
    $args = [
        'post_type' => 'post',
        's' => $keyword,
        'posts_per_page' => 9, // S·ªë b√†i vi·∫øt m·ªói trang
        'paged' => $paged, // Trang hi·ªán t·∫°i,
        'category__not_in' => [$exclude_category_id], // Lo·∫°i tr·ª´ danh m·ª•c

    ];

    $query = new WP_Query($args);
    $posts = [];
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $data = [
                'post_title' => esc_html(get_the_title()),
                'post_permalink' => esc_url(get_the_permalink()),
                'post_thumb' => esc_url(get_the_post_thumbnail_url(get_the_ID())), // Tr·∫£ v·ªÅ URL c·ªßa thumbnail
                'post_date' => esc_html(get_the_date('d/m/Y H:i')),
            ];
            $posts[] = $data;
        }
    }

    // Kh√¥i ph·ª•c l·∫°i truy v·∫•n g·ªëc sau khi ho√†n th√†nh
    wp_reset_postdata();

    return [
        'posts' => $posts,
        'max_num_pages' => $query->max_num_pages, // T·ªïng s·ªë trang
    ];
}



function get_all_posts_relation()
{

    $id_post = get_the_ID();
    $categories = wp_get_post_categories($id_post);
    $posts = [];
    if ($categories) {
        $target = [
            'post_type' => 'post',
            'posts_per_page' => 6,
            'orderby' => 'date',
            'order' => 'desc',
            'category__in' => $categories,
            'post__not_in' => [$id_post]
        ];

        $query = new WP_Query($target);

        if ($query->have_posts()) {
            while ($query->have_posts()) {
                $query->the_post();
                $post_item = [
                    'title' => get_the_title(),
                    'excerpt' => get_the_excerpt(),
                    'link' => get_the_permalink(),
                    'date' => get_the_date('d/m/Y H:i'),
                    'date_new_old' => get_the_date('Y-m-d H:i:s', get_the_ID()),
                    'avatar' => get_the_post_thumbnail_url(get_the_ID(), 'full')
                ];
                $posts[] = $post_item;
            }
        }
        wp_reset_postdata();
    }
    return ["posts" => $posts, 'category_name' => get_the_category($id_post)[0]->slug];
}


// rating


function check_and_insert_post_rating($post_id)
{
    global $wpdb;

    // Ki·ªÉm tra xem b√†i post n√†y ƒë√£ c√≥ trong b·∫£ng tbl_post_ratings ch∆∞a
    $exists = $wpdb->get_var(
        $wpdb->prepare(
            "SELECT COUNT(*) FROM tbl_post_ratings WHERE post_id = %d",
            $post_id
        )
    );

    if ($exists == 0) {
        $random = mt_rand(450, 500) / 100;
        $number_rating = rand(800, 1000);
        $data = [
            "post_id" => $post_id,
            "rating" => round($random, 1),
            "number_rating" => $number_rating,
            "status" => 0
        ];

        // Insert d·ªØ li·ªáu v√†o b·∫£ng tbl_post_ratings
        $wpdb->insert("tbl_post_ratings", $data);
    } else {
        // N·∫øu b√†i post ƒë√£ t·ªìn t·∫°i, l·∫•y d·ªØ li·ªáu hi·ªán t·∫°i t·ª´ b·∫£ng
        $result = $wpdb->get_row($wpdb->prepare(
            "SELECT rating, number_rating FROM tbl_post_ratings WHERE post_id = %d",
            $post_id
        ), ARRAY_A);
        $random = $result['rating'];
        $number_rating = $result['number_rating'];
    }

    return ['rating' => $random, 'number_rating' => $number_rating];
}



add_action('wp', 'auto_insert_post_rating');

function auto_insert_post_rating()
{
    if (is_single()) {
        $post_id = get_the_ID();
        $rating_info = check_and_insert_post_rating($post_id);
        global $rating, $number_rating;

        $rating = $rating_info['rating'];
        $number_rating = $rating_info['number_rating'];
    }
}





function my_theme_add_admin_menu()
{
    add_menu_page(
        'Qu·∫£n l√Ω li√™n h·ªá', // Ti√™u ƒë·ªÅ trang
        'Li√™n h·ªá', // Ti√™u ƒë·ªÅ menu
        'manage_options', // Kh·∫£ nƒÉng truy c·∫≠p
        'contact_form_entries', // Slug trang
        'my_theme_display_contact_entries', // H√†m hi·ªÉn th·ªã
        'dashicons-email', // Bi·ªÉu t∆∞·ª£ng menu
        6 // V·ªã tr√≠ menu
    );
}
add_action('admin_menu', 'my_theme_add_admin_menu');


function my_theme_display_contact_entries()
{
    global $wpdb;
    $table_name = 'tbl_contact';

    $results = $wpdb->get_results("SELECT * FROM $table_name");

    echo '<form method="POST" action="https://laucua.vn/wp-json/laucua/api/delete-contact-select/"><div class="wrap">';
    echo '<h1>Qu·∫£n l√Ω li√™n h·ªá</h1>';
    echo '
        <style>
        .my-custom-table th:nth-child(6),
        .my-custom-table td:nth-child(6) {
            width: 40%;
        }        
        table.my-custom-table {
        margin-bottom: 20px;
        }
        </style>
    ';
    echo '<table class="wp-list-table widefat fixed striped my-custom-table">';
    echo '<thead><tr><th><input type="checkbox" name="selected_all" id="selected_all" class="selected_all" value="" style="margin: 0;"></th><th>ID</th><th>T√™n</th><th>Email</th><th>SƒêT</th><th>N·ªôi dung</th><th>Ng√†y g·ª≠i</th> <th>H√†nh ƒë·ªông</th></tr></thead>';
    echo '<tbody>';

    if ($results) {
        foreach ($results as $row) {
            echo '<tr>';
            echo '<td>' . '<input type="checkbox" class="order-checkbox" name="contact[]" id="" value="' . esc_html($row->id) . '">' . '</td>';
            echo '<td>' . esc_html($row->id) . '</td>';
            echo '<td>' . esc_html($row->name) . '</td>';
            echo '<td>' . esc_html($row->email) . '</td>';
            echo '<td>' . esc_html($row->phone) . '</td>';
            echo '<td>' . esc_html($row->message) . '</td>';
            echo '<td>' . wp_date('d/m/Y H:i', strtotime($row->created_at)) . '</td>';
            echo '<td>' . '<a onclick="return confirm(\'ƒê√°nh d·∫•u l√† ƒë√£ ƒë·ªçc xong. Kh√¥ng hi·ªÉn th·ªã l·∫°i n·ªØa?\')" href="https://gacmai.vn/wp-json/gacmai/api/delete-data/' . $row->id . '">‚úî</a>' . '</td>';
            echo '</tr>';
        }
    } else {
        echo '<tr><td colspan="5">Kh√¥ng c√≥ li√™n h·ªá n√†o.</td></tr>';
    }

    echo '</tbody>';
    echo '</table>';
    if (!empty($results)) {
        echo '<a href="https://gacmai.vn/wp-json/gacmai/api/delete-all-contact/" onclick="return confirm(\'B·∫°n ch·∫Øn ch·∫Øn mu·ªën x√≥a h·∫øt n·ªôi dung li√™n h·ªá?\')" style="margin-top: 50px; text-decoration: none; padding: 5px 10px; border-radius: 5px;     border: 1px solid blue;
    cursor: pointer;"name="deleteAll">X√≥a t·∫•t c·∫£</a>';
    }
    echo '</div>
    
    </form>';


    echo '<script>
    document.addEventListener("DOMContentLoaded", function() {
        var selectAllCheckbox = document.querySelector(".selected_all");
        var orderCheckboxes = document.querySelectorAll(".order-checkbox");

        selectAllCheckbox.addEventListener("change", () => {
            
            if(orderCheckboxes.length >= 1) {
                orderCheckboxes.forEach((checkItem, index) => {
                checkItem.checked = selectAllCheckbox.checked;
                
            })
            }
            
        })
        
        
        if(orderCheckboxes.length >= 1) {
                orderCheckboxes.forEach((checkItem, index) => {
                    
                    checkItem.addEventListener("change", () => {
                    
                        if(!(checkItem.checked)) {
                        selectAllCheckbox.checked = false;
                    }
                    
                    
                    })
                
                
            })
        }
        
        
        
       
    });
    </script>';
}


add_action('rest_api_init', function () {
    register_rest_route(
        'gacmai/api',
        '/delete-data/(?P<id_contact>\d+)',
        array(
            'methods' => 'GET',
            'callback' => 'delete_contact',
            'permission_callback' => '__return_true'
        )
    );
});


add_action('rest_api_init', function () {
    register_rest_route(
        'gacmai/api',
        '/delete-all-contact',
        array(
            'methods' => 'GET',
            'callback' => 'delete_contact_all',
            'permission_callback' => '__return_true'
        )
    );
});


function delete_contact(WP_REST_Request $data)
{
    global $wpdb;
    $id_contact = $data['id_contact'];
    $table = 'tbl_contact';
    $bind = [
        'id' => $id_contact
    ];
    $wpdb->delete($table, $bind);
    header('Location: https://gacmai.vn/wp-admin/admin.php?page=contact_form_entries');
}

function delete_contact_all()
{
    global $wpdb;
    $table = 'tbl_contact';
    $wpdb->query('DELETE FROM ' . $table);
    header('Location: https://gacmai.vn/wp-admin/admin.php?page=contact_form_entries');
}


//


add_action('wp_ajax_load_more_posts_search', 'load_more_posts_search');
add_action('wp_ajax_nopriv_load_more_posts_search', 'load_more_posts_search');

function load_more_posts_search()
{
    // L·∫•y c√°c tham s·ªë t·ª´ request Ajax
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $posts_per_page = isset($_POST['posts_per_page']) ? intval($_POST['posts_per_page']) : 9;
    $category_id = isset($_POST['cate']) ? intval($_POST['cate']) : 0;
    $title = isset($_POST['q']) ? sanitize_text_field($_POST['q']) : '';

    // T·∫°o c√°c ƒë·ªëi s·ªë cho truy v·∫•n WP_Query
    $args = array(
        'post_type' => 'post',
        's' => $title,
        'posts_per_page' => $posts_per_page,
        'paged' => $page,
        'category__not_in' => $category_id,
    );

    $query = new WP_Query($args);
    $posts = array();

    // Ki·ªÉm tra v√† l·∫•y d·ªØ li·ªáu t·ª´ truy v·∫•n
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_date = get_the_date('Y-m-d H:i:s', get_the_ID());
            $post_timestamp = strtotime($post_date);
            $current_timestamp = current_time('timestamp');
            $days_diff = floor(($current_timestamp - $post_timestamp) / (60 * 60 * 24));
            $data = array(
                'post_title' => esc_html(get_the_title()),
                'post_permalink' => esc_url(get_the_permalink()),
                'post_thumb' => esc_url(get_the_post_thumbnail_url(get_the_ID())),
                'post_date' => esc_html(get_the_date('d/m/Y H:i')),
                'days_diff' => $days_diff
            );
            $posts[] = $data;
        }
    }

    wp_reset_postdata();

    // T·∫°o ph·∫£n h·ªìi JSON
    $response = array(
        'success' => true,
        'data' => array(
            'posts' => $posts,
            'has_more' => $query->max_num_pages > $page ? true : false,
        ),
        'html' => '', // T·∫°o HTML cho danh s√°ch b√†i vi·∫øt
    );

    // N·∫øu c√≥ b√†i vi·∫øt, th√™m HTML t∆∞∆°ng ·ª©ng v√†o response
    if (!empty($posts)) {
        ob_start();
        foreach ($posts as $post) {
        ?>
            <li>
                <div class="post-home">
                    <div class="post-home-thumb">
                        <a href="<?php echo $post['post_permalink']; ?>" class="wrap-next-image">
                            <?php if ($post['post_thumb']): ?>
                                <img layout="fill" src="<?php echo $post['post_thumb']; ?>" alt="<?php echo $post['post_title']; ?>"
                                    class="lazy-wave">
                            <?php else: ?>
                                <img layout="fill" src="https://gacmai.vn/wp-content/uploads/2024/06/default_image.png"
                                    alt="default image" class="">
                            <?php endif; ?>
                        </a>
                        <?php if ($post['days_diff'] < 2): ?>
                            <div class="post-home-lable" style="width: unset !important;"><span>M·ªõi</span>
                            </div>
                        <?php endif; ?>
                    </div>
                    <h2 class="post-home-title">
                        <a href="<?php echo $post['post_permalink']; ?>" style="width:100%"><?php echo $post['post_title']; ?></a>
                    </h2>
                    <div class="post-home-date" style="position:relative">
                        <span><?php echo $post['post_date']; ?></span>
                    </div>
                </div>
            </li>
<?php
        }
        $response['html'] = ob_get_clean();
    }

    // G·ª≠i d·ªØ li·ªáu JSON v·ªÅ cho client
    wp_send_json($response);
    wp_die();
}

function get_list_sliders()
{
    global $wpdb;
    $table_name = 'tbl_my_sliders'; // Ch√∫ √Ω prefix b·∫£ng
    $results = $wpdb->get_results("SELECT wp_posts.guid as guid_i FROM {$table_name} INNER JOIN wp_posts on {$table_name}.id_image = wp_posts.ID");
    return $results;
}
